--------------------------
Path: README.md

# better-reads

To Do
===============

**Library**
- Your library is empty. Click + to add a book, or display our template library!
- Add library stats:
  - total books
  - total authors
  - read/unread
- Add "Order by" option
  - title
  - author
  - pages
- Add "Delete all" option + Are you sure prompt?

**Form**
- Add more fields (language, publication date) to book object and input
- Add possibility to add img, via url


**Storage**
- LocalStorage
- Then: Firebase / auth with Google account

Done
===============


--------------------------
Path: combined.txt


--------------------------
Path: index.html

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Library</title>
  <script defer src="script.js"></script>
  <link rel="stylesheet" href="styles.css">
</head>

<body>
  <h1>BetterReads</h1>
  <p>Keep track of your books with BetterReads!</p>
  <button id="modal-btn" class="modal-btn">Add a Book</button>

  <div id="form-modal" class="form-modal">
    <form class="form-modal-content">
      <span id="close-btn" class="close-btn">&times;</span>
      <label for="title-input">Title</label>
      <input type="text" name="title-input" id="title-input" class="form text-field">
      <label for="author-input">Author</label>
      <input type="text" name="author-input" id="author-input" class="form text-field">
      <label for="num-pages-input">Number of pages</label>
      <input type="number" name="num-pages-input" id="num-pages-input" class="form text-field">
      <label for="is-read-input">Already read?</label>
      <input type="radio" name="is-read-input" id="is-read-radio" class="form radio-btn">
      <label for="is-read-radio">Yes</label>
      <input type="radio" name="is-read-input" id="is-unread-radio" class="form radio-btn">
      <label for="is-unread-radio">No</label>
      <label>Rating</label>
      <div class="rating">
        <input id="star5" name="star" type="radio" value="5" class="radio-btn hide" />
        <label for="star5">☆</label>
        <input id="star4" name="star" type="radio" value="4" class="radio-btn hide" />
        <label for="star4">☆</label>
        <input id="star3" name="star" type="radio" value="3" class="radio-btn hide" />
        <label for="star3">☆</label>
        <input id="star2" name="star" type="radio" value="2" class="radio-btn hide" />
        <label for="star2">☆</label>
        <input id="star1" name="star" type="radio" value="1" class="radio-btn hide" />
        <label for="star1">☆</label>
        <div class="clear"></div>
      </div>
      <button type="submit" name="submit-btn" id="submit-btn" class="form button">Submit</button>
    </form>
  </div>

  <h2 id="book-list" class="book-list">Your Books</h2>

</body>

</html>
--------------------------
Path: script.js

const titleInput = document.querySelector("#title-input");
const authorInput = document.querySelector("#author-input");
const numPagesInput = document.querySelector("#num-pages-input");
const isReadInput = document.querySelector("#is-read-input");
const ratingInput = () => document.querySelector('input[name="star"]:checked');
const submitBtn = document.querySelector("#submit-btn");
const bookList = document.querySelector("#book-list");
const isReadRadio = document.querySelector("#is-read-radio");

let library = [];

let bookIdCounter = library.length;

function Book(title, author, numPages, isRead, rating) {
  this.id = bookIdCounter++;
  this.title = title;
  this.author = author;
  this.numPages = numPages;
  this.isRead = isRead;
  this.rating = rating;
  this.info = function () {
    return `${this.title} by ${this.author}, ${this.numPages} pages, read: ${
      this.isRead ? "Yes" : "No"
    }, rating: ${this.rating}`;
  };
  this.toggleReadStatus = function () {
    this.isRead = !this.isRead;
  }
}

function getBookInput() {
  const title = titleInput.value ? titleInput.value : "N/A";
  const author = authorInput.value ? authorInput.value : "N/A";
  const numPages = numPagesInput.value ? numPagesInput.value : "N/A";
  const isRead = isReadRadio.checked ? true : false;
  const rating = ratingInput() ? ratingInput().value : "No rating";
  return new Book(title, author, numPages, isRead, rating);
}

function addNewBook() {
  clearBookList();
  const newBook = getBookInput();
  library.push(newBook);
  console.log(newBook.info());
  console.table(library);
  displayBookList();
}

function clearBookList() {
  bookList.textContent = "";
}

submitBtn.addEventListener("click", (e) => {
  e.preventDefault();
  addNewBook();
  modal.style.display = "none";
});

function createStarRating(rating) {
  const starRatingP = document.createElement("p");
  starRatingP.className = "star-rating-p";
  for (let i = 1; i <= 5; i++) {
    const star = document.createElement("span");
    star.className =
      i <= rating ? "star-rating-filled" : "star-rating-unfilled";
    starRatingP.appendChild(star);
  }
  return starRatingP;
}

function displayBookList() {
  clearBookList();
  for (let i = 0; i < library.length; i++) {
    const book = library[i];
    const card = document.createElement("div");
    const title = document.createElement("p");
    const author = document.createElement("p");
    const numPages = document.createElement("p");
    const isRead = document.createElement("p");
    const rating = createStarRating(book.rating);
    const toggleReadBtn = document.createElement("button");
    const removeBtn = document.createElement("button");
    
    removeBtn.id = "remove-btn-" + i;
    removeBtn.textContent = "Remove";
    removeBtn.addEventListener("click", () => {
      library = library.filter((item) => item.id !== book.id);
      displayBookList();
    });

    toggleReadBtn.textContent = book.isRead ? "Set as unread" : "Set as read";

    toggleReadBtn.addEventListener("click", () => {
      book.toggleReadStatus();
      displayBookList();
    });

    card.classList.add("card");
    title.classList.add("card-title");
    author.classList.add("card-author");
    numPages.classList.add("card-num-pages");
    isRead.classList.add("card-is-read");
    rating.classList.add("card-rating");
    removeBtn.classList.add("remove-btn");

    title.textContent = book.title;
    author.textContent = book.author;
    numPages.textContent = `${book.numPages} pages`;
    isRead.textContent = book.isRead ? "Already read" : "Not read yet";
    card.append(title, author, numPages, isRead, toggleReadBtn, rating, removeBtn);
    bookList.appendChild(card);
  }
}

function clearForm() {
  titleInput.value = "";
  authorInput.value = "";
  numPagesInput.value = null;
  isReadRadio.checked = true;
  ratingInput.value = 1;
}

// Modal

// Get the modal
const modal = document.querySelector("#form-modal");

// Get the button that opens the modal
const modalBtn = document.querySelector("#modal-btn");

// Get the <span> element that closes the modal
const closeBtn = document.querySelector("#close-btn");

// When the user clicks on the button, open the modal
modalBtn.onclick = function() {
  clearForm();
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
closeBtn.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}


// FOR TESTING

const sciFiBooksByWomen = [
  { title: "Kindred", author: "Octavia E. Butler" },
  { title: "The Left Hand of Darkness", author: "Ursula K. Le Guin" },
  { title: "Parable of the Sower", author: "Octavia E. Butler" },
  { title: "Ancillary Justice", author: "Ann Leckie" },
  { title: "Dawn", author: "Octavia E. Butler" },
  { title: "The Power", author: "Naomi Alderman" },
  { title: "Frankenstein", author: "Mary Shelley" },
  { title: "The Hunger Games", author: "Suzanne Collins" },
  { title: "Shards of Honor", author: "Lois McMaster Bujold" },
  { title: "Who Fears Death", author: "Nnedi Okorafor" },
  { title: "Binti", author: "Nnedi Okorafor" },
  { title: "The Dispossessed", author: "Ursula K. Le Guin" },
  { title: "Ammonite", author: "Nicola Griffith" },
  { title: "Mirror Dance", author: "Lois McMaster Bujold" },
  { title: "Grass", author: "Sheri S. Tepper" },
  { title: "The Snow Queen", author: "Joan D. Vinge" },
  { title: "Fledgling", author: "Octavia E. Butler" },
  { title: "Oryx and Crake", author: "Margaret Atwood" },
  { title: "The Handmaid's Tale", author: "Margaret Atwood" },
  { title: "Memory", author: "Lois McMaster Bujold" },
  { title: "Patternmaster", author: "Octavia E. Butler" },
];

function populateLibrary() {
  sciFiBooksByWomen.forEach(book => {
      const newBook = new Book(
          book.title,
          book.author,
          Math.floor(Math.random() * 500) + 100,
          Math.random() > 0.5,
          Math.floor(Math.random() * 5) + 1,
      );
      library.push(newBook);
  });
  displayBookList();
}

window.onload = populateLibrary;
--------------------------
Path: styles.css

/* Resets and general */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html {
  position: relative;
  height: 100dvh;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
  margin: 0;
  color: #585858;
}

/* Form styling */
form {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

/* Label styling */
label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

/* Input fields styling */
input[type="text"],
input[type="number"],
input[type="checkbox"] {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Button styling */
button {
  background-color: #28a745; /* Green */
  color: white;
  border: none;
  padding: 10px 20px;
  text-align: center;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
}

button:hover {
  background-color: #218838;
}

/* Book list styling */
#book-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 20px;
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Card styling for each book */
.card {
  background: linear-gradient(145deg, #ffffff, #e6e6e6);
  padding: 15px;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card-title {
  color: #007bff; /* Blue */
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 10px;
}

.card-author {
  color: #6c757d; /* Grey */
  margin-bottom: 5px;
}

.card-num-pages {
  color: #28a745; /* Green */
  margin-bottom: 5px;
}

.card-is-read {
  font-style: italic;
  color: #dc3545; /* Red */
  margin-bottom: 5px;
}

.card-rating {
  margin-bottom: 5px;
}

/* RATINGS */

.txt-center {
  text-align: center;
}
.hide {
  display: none;
}

.clear {
  float: none;
  clear: both;
}

.rating {
  width: 90px;
  unicode-bidi: bidi-override;
  direction: rtl;
  text-align: center;
  position: relative;
}

.rating > label {
  float: right;
  display: inline;
  padding: 0;
  margin: 0;
  position: relative;
  width: 1.1em;
  cursor: pointer;
  color: #000;
}

.rating > label:hover,
.rating > label:hover ~ label,
.rating > input.radio-btn:checked ~ label {
  color: transparent;
}

.rating > label:hover:before,
.rating > label:hover ~ label:before,
.rating > input.radio-btn:checked ~ label:before,
.rating > input.radio-btn:checked ~ label:before {
  content: "\2605";
  position: absolute;
  left: 0;
  color: #FFD700;
}

/* Star rating display */
.star-rating-filled, .star-rating-unfilled {
  /* display: inline-block; */
  position: relative;
  width: 1.1em;
}

.star-rating-filled::before, .star-rating-unfilled::before {
  content: "★"; /* This sets the star character */
  /* position: absolute; */
}

.star-rating-filled::before {
  color: #f5b505; /* Yellow color for filled stars */
}

.star-rating-unfilled::before {
  color: #a3a3a3; /* Transparent color for unfilled stars */
}

/* The Modal (background) */
.form-modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.form-modal-content {
  background-color: #fefefe;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
}

/* The Close Button */
.close-btn {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close-btn:hover,
.close-btn:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
--------------------------
Path: tempCodeRunnerFile.js


}
