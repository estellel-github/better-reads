--------------------------
Path: README.md

# better-reads

To Do
===============

**Library**
- Your library is empty. Click + to add a book, or display our template library!

- Add "Order by" option
  - title
  - author
  - pages
- Add "Filter" option
- Add "Delete all" option + Are you sure prompt?

**Storage**
- LocalStorage
- Then: Firebase / auth with Google account

Fix
===============
- Recheck all UI on mobile
- Form on mobile (iOS, Chrome) -> radio buttons not showing

Done
===============

- Add publication date to book object and input âœ…
- Add possibility to add img, via url / display img in card âœ…

- Display inverted library so that recent addition shows on top âœ…

- Add library stats: âœ…
  - total books âœ…
  - total authors âœ…
  - read/unread âœ…
  - latest addition âœ…
--------------------------
Path: combined.txt


--------------------------
Path: index.html

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Library</title>
  <script defer src="script.js"></script>
  <link rel="stylesheet" href="styles.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
    rel="stylesheet">
</head>

<body>
  <div id="form-modal" class="form-modal">
    <form class="form-modal-content">
      <span id="close-btn" class="close-btn">&times;</span>
      <label for="title-input">Title</label>
      <input type="text" name="title-input" id="title-input" class="form text-field">
      <label for="author-input">Author</label>
      <input type="text" name="author-input" id="author-input" class="form text-field">
      <label for="num-pages-input">Number of pages</label>
      <input type="number" name="num-pages-input" id="num-pages-input" class="form text-field">
      <label for="year-input">Year of Publication</label>
      <input type="number" name="year-input" id="year-input" class="form text-field">
      <label for="img-url-input">Book Cover URL</label>
<input type="url" name="img-url-input" id="img-url-input" class="form url-field">
      <label for="is-read-input">Already read?</label>
      <div id="is-read-wrapper" class="is-read-wrapper">
        <input type="radio" name="is-read-input" id="is-read-radio" class="form radio-btn">
        <label for="is-read-radio">Yes</label>
        <input type="radio" name="is-read-input" id="is-unread-radio" class="form radio-btn">
        <label for="is-unread-radio">No</label>
      </div>
      <label>Rating</label>
      <div class="rating">
        <input id="star5" name="star" type="radio" value="5" class="radio-btn hide" />
        <label for="star5">â˜†</label>
        <input id="star4" name="star" type="radio" value="4" class="radio-btn hide" />
        <label for="star4">â˜†</label>
        <input id="star3" name="star" type="radio" value="3" class="radio-btn hide" />
        <label for="star3">â˜†</label>
        <input id="star2" name="star" type="radio" value="2" class="radio-btn hide" />
        <label for="star2">â˜†</label>
        <input id="star1" name="star" type="radio" value="1" class="radio-btn hide" />
        <label for="star1">â˜†</label>
        <div class="clear"></div>
      </div>
      <button type="submit" name="submit-btn" id="submit-btn" class="form button">Submit</button>
    </form>
  </div>

  <div id="container" class="container">
    <h1>ðŸ“– BetterReads</h1>
    <p>Keep track of your books with BetterReads!</p>
    <button id="modal-btn" class="modal-btn">+ Add Book</button>
    <p>or</p>
    <button id="load-btn" class="btn">Load Sample Library</button>    
    <hr>
    <h2>Stats</h2>
    <section id="stats" class="stats"></section>
    <hr>
    <h2>Your Books</h2>
    <section id="book-list" class="book-list"></section>
  </div>
</body>

</html>
--------------------------
Path: script.js

const titleInput = document.querySelector("#title-input");
const authorInput = document.querySelector("#author-input");
const yearInput = document.querySelector("#year-input");
const numPagesInput = document.querySelector("#num-pages-input");
const isReadInput = document.querySelector("#is-read-input");
const imgUrlInput = document.querySelector("#img-url-input");
const ratingInput = () => document.querySelector('input[name="star"]:checked');
const isReadRadio = document.querySelector("#is-read-radio");
const submitBtn = document.querySelector("#submit-btn");

const stats = document.querySelector("#stats");
const bookList = document.querySelector("#book-list");

let library = [];

let bookIdCounter = library.length;

function Book(title, author, year, numPages, isRead, rating, imgUrl) {
  this.id = bookIdCounter++;
  this.title = title;
  this.author = author;
  this.year = year;
  this.numPages = numPages;
  this.isRead = isRead;
  this.rating = rating;
  this.imgUrl = imgUrl || "https://www.boldstrokesbooks.com/assets/bsb/images/book-default-cover.jpg";
  this.getBookInfo = function () {
    return `${this.title} by ${this.author}`;
  };
  this.toggleReadStatus = function () {
    this.isRead = !this.isRead;
  };
}

function getBookInput() {
  const title = titleInput.value ? titleInput.value : "N/A";
  const author = authorInput.value ? authorInput.value : "N/A";
  const year = yearInput.value ? yearInput.value : "N/A";
  const numPages = numPagesInput.value ? numPagesInput.value : "N/A";
  const isRead = isReadRadio.checked ? true : false;
  const rating = ratingInput() ? ratingInput().value : "No rating";
  const imgUrl = imgUrlInput.value;
  return new Book(title, author, year, numPages, isRead, rating, imgUrl);
}

function addNewBook() {
  clearBookList();
  const newBook = getBookInput();
  library.push(newBook);
  // console.log(parseInt(newBook.info()));
  console.table(library);
  displayBookList();
}

function clearBookList() {
  bookList.textContent = "";
}

function clearStats() {
  stats.textContent = "";
}

submitBtn.addEventListener("click", (e) => {
  e.preventDefault();
  addNewBook();
  modal.style.display = "none";
});

function createStarRating(rating) {
  const starRatingP = document.createElement("p");
  starRatingP.className = "star-rating-p";
  for (let i = 1; i <= 5; i++) {
    const star = document.createElement("span");
    star.className =
      i <= rating ? "star-rating-filled" : "star-rating-unfilled";
    starRatingP.appendChild(star);
  }
  return starRatingP;
}

function displayBookList() {
  clearBookList();
  for (let i = library.length - 1; i >= 0; i--) {
    const book = library[i];
    const card = document.createElement("div");
    const title = document.createElement("p");
    const author = document.createElement("p");
    const img = document.createElement("img");
    const year = document.createElement("p");
    const numPages = document.createElement("p");
    const isRead = document.createElement("p");
    const rating = createStarRating(book.rating);
    const buttonBox = document.createElement("buttonBox");
    const toggleReadBtn = document.createElement("button");
    const removeBtn = document.createElement("button");

    removeBtn.id = "remove-btn-" + i;
    removeBtn.textContent = "ðŸ—‘ Remove";
    removeBtn.addEventListener("click", () => {
      library = library.filter((item) => item.id !== book.id);
      displayBookList();
    });

    toggleReadBtn.textContent = book.isRead ? "Mark as unread" : "Mark as read";

    book.isRead
      ? toggleReadBtn.classList.add("toggle-read", "btn-small", "red")
      : toggleReadBtn.classList.add("toggle-read", "btn-small", "green");

    toggleReadBtn.addEventListener("click", () => {
      book.toggleReadStatus();
      displayBookList();
    });

    img.src = book.imgUrl;
    img.alt = `Cover of ${book.title}`;

    card.classList.add("card");
    title.classList.add("card-title");
    author.classList.add("card-author");
    year.classList.add("card-year");
    numPages.classList.add("card-num-pages");
    isRead.classList.add("card-is-read");
    rating.classList.add("card-rating");
    removeBtn.classList.add("remove-btn", "btn-small");
    buttonBox.classList.add("buttonBox");

    title.textContent = book.title;
    author.textContent = book.author;
    numPages.textContent = `${book.numPages} pages`;
    year.textContent = "Year of publication: " + book.year;
    // isRead.textContent = book.isRead ? "Already read" : "Not read yet";
    card.append(img, title, author, year, numPages, rating, buttonBox);
    buttonBox.append(toggleReadBtn, removeBtn);
    bookList.appendChild(card);
  }
  storeToLocal();
  displayStats();
}

function uniqueAuthors(books) {
  const authorsSet = new Set(books.map((book) => book.author));
  return Array.from(authorsSet);
}

function clearForm() {
  titleInput.value = "";
  authorInput.value = "";
  yearInput.value = "";
  numPagesInput.value = null;
  isReadRadio.checked = true;
  ratingInput.value = 1;
}

function displayStats() {
  clearStats();
  const totalBooks = document.createElement("div");
  const totalAuthors = document.createElement("div");
  const totalRead = document.createElement("div");
  const totalNotRead = document.createElement("div");
  const mostRecentAdded = document.createElement("div");

  totalBooks.textContent = "ðŸ“– Total books: " + library.length;

  let numUniqueAuthors = uniqueAuthors(library);
  totalAuthors.textContent =
    "ðŸ‘¤ Individual authors: " + numUniqueAuthors.length;

  let numBooksRead = library.filter((item) => item.isRead === true);
  totalRead.textContent = "âœ… Total books read: " + numBooksRead.length;

  stats.append(totalBooks, totalAuthors, totalRead);

  let numBooksNotRead = library.filter((item) => item.isRead === false);
  numBooksNotRead ? numBooksNotRead : numBooksNotRead = 0; 
  
  totalNotRead.textContent =
    "âŒ› Total books to read: " + numBooksNotRead.length;

  let latestBookAdded = library[library.length - 1].getBookInfo();
  console.log(latestBookAdded);
  mostRecentAdded.textContent = "âœ¨ Latest addition: " + latestBookAdded;
  stats.append(
    totalBooks,
    totalAuthors,
    totalRead,
    totalNotRead,
    mostRecentAdded
  );
}

// Modal

// Get the modal
const modal = document.querySelector("#form-modal");

// Get the button that opens the modal
const modalBtn = document.querySelector("#modal-btn");

// Get the <span> element that closes the modal
const closeBtn = document.querySelector("#close-btn");

// When the user clicks on the button, open the modal
modalBtn.onclick = function () {
  clearForm();
  modal.style.display = "block";
};

// When the user clicks on <span> (x), close the modal
closeBtn.onclick = function () {
  modal.style.display = "none";
};

// When the user clicks anywhere outside of the modal, close it
window.onclick = function (event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
};

// FOR TESTING

const sciFiBooksByWomen = [
  {
    title: "Kindred",
    author: "Octavia E. Butler",
    year: 1979,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/5/57/OctaviaEButler_Kindred.jpg",
  },
  {
    title: "The Left Hand of Darkness",
    author: "Ursula K. Le Guin",
    year: 1969,
    imgUrl:
      "https://m.media-amazon.com/images/I/81eTMHvXZqL._AC_UF1000,1000_QL80_.jpg",
  },
  {
    title: "Parable of the Sower",
    author: "Octavia E. Butler",
    year: 1993,
    imgUrl:
      "https://m.media-amazon.com/images/I/81cccWWMQmL._AC_UF894,1000_QL80_.jpg",
  },
  {
    title: "Ancillary Justice",
    author: "Ann Leckie",
    year: 2013,
    imgUrl:
      "https://www.orbitbooks.net/wp-content/uploads/2013/06/Leckie_AncillaryJustice_TP.jpg",
  },
  {
    title: "Dawn",
    author: "Octavia E. Butler",
    year: 1987,
    imgUrl:
      "https://m.media-amazon.com/images/I/61jVFGXNLnL._AC_UF894,1000_QL80_.jpg",
  },
  {
    title: "Frankenstein",
    author: "Mary Shelley",
    year: 1818,
    imgUrl:
      "https://www.printmag.com/wp-content/uploads/2017/10/2a34d8_737fd003c63b4109909e4f589704a4c2mv2.jpg",
  },
  {
    title: "Shards of Honor",
    author: "Lois McMaster Bujold",
    year: 1986,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/f/fa/Shards_of_honor_cover.jpg",
  },
  {
    title: "Who Fears Death",
    author: "Nnedi Okorafor",
    year: 2010,
    imgUrl:
      "https://m.media-amazon.com/images/I/71fYaW9Q9RL._AC_UF894,1000_QL80_.jpg",
  },
  {
    title: "The Dispossessed",
    author: "Ursula K. Le Guin",
    year: 1974,
    imgUrl:
      "https://m.media-amazon.com/images/I/914nOgluTAL._AC_UF894,1000_QL80_.jpg",
  },
  {
    title: "Ammonite",
    author: "Nicola Griffith",
    year: 1992,
    imgUrl:
      "https://m.media-amazon.com/images/I/61EWjbnkKhL._AC_UF1000,1000_QL80_.jpg",
  },
  {
    title: "Mirror Dance",
    author: "Lois McMaster Bujold",
    year: 1994,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/0/05/Mirrordancecover.jpg",
  },
  {
    title: "The Snow Queen",
    author: "Joan D. Vinge",
    year: 1980,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/a/a7/TheSnowQueen%281stEd%29.jpg",
  },
  {
    title: "Fledgling",
    author: "Octavia E. Butler",
    year: 2005,
    imgUrl:
      "https://m.media-amazon.com/images/I/81u6EGJRNhL._AC_UF894,1000_QL80_.jpg",
  },
  {
    title: "Oryx and Crake",
    author: "Margaret Atwood",
    year: 2003,
    imgUrl:
      "https://m.media-amazon.com/images/I/710lFK3q6yL._AC_UF1000,1000_QL80_.jpg",
  },
  {
    title: "The Handmaid's Tale",
    author: "Margaret Atwood",
    year: 1985,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/thumb/1/18/TheHandmaidsTale%281stEd%29.jpg/220px-TheHandmaidsTale%281stEd%29.jpg",
  },
  {
    title: "Her Smoke Rose Up Forever",
    author: "James Tiptree, Jr.",
    year: 1990,
    imgUrl:
      "https://upload.wikimedia.org/wikipedia/en/6/62/Her_smoke_rose_up_forever.jpg",
  },
];

function storeToLocal() {
  const libraryJson = JSON.stringify(library);
  localStorage.setItem("library", libraryJson);
  console.table(localStorage);
}

function retrieveBooks() {
  const storedBooksJson = localStorage.getItem("library");
  if (storedBooksJson) {
    library = JSON.parse(storedBooksJson);
    displayBookList();
  } else {
    console.log("No books found in Local Storage.")
  }
}

function populateLibrary() {
  library = [];
  sciFiBooksByWomen.forEach((book) => {
    const newBook = new Book(
      book.title,
      book.author,
      book.year,
      Math.floor(Math.random() * 500) + 100,
      Math.random() > 0.5,
      Math.floor(Math.random() * 5) + 1,
      book.imgUrl
    );
    library.push(newBook);
  });
  displayBookList();
}

window.onload = retrieveBooks();
--------------------------
Path: styles.css

/* Resets and general */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html {
  position: relative;
  height: 100dvh;
}

body {
  font-family: "Roboto", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f4f4f9;
  color: #333;
  line-height: 1.6;
  padding: 20px;
}

h1, h2 {
  color: #333;
}

h1 {
  font-size: 3rem;
}

hr {
  border-top: 1px solid rgb(206, 206, 206);
  align-self: stretch;
  margin: 1rem;
}

h1 + p {
  margin-bottom: 1rem;
}

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.invisible {
  visibility: none;
}

/* Form styling */
form {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
}

/* Label styling */
label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

/* Input fields styling */
input[type="text"],
input[type="number"],
input[type="checkbox"],
input[type="url"] {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.form.button {
  align-self: flex-end;
}

.is-read-wrapper {
  display: flex;
  align-items: center;
  gap: 5px;
}

.radio-btn {
  height: 100%;
  margin-top: -5px;
  margin-right: 10px;
  vertical-align: middle;
}

.radio-btn + label {
  margin-right: 10px;
}

/* Button styling */
button {
  background-color: #3b82f6;
  color: white;
  border: none;
  padding: 10px 20px;
  text-align: center;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
  display: flex;
  justify-content: center;
}

button:hover {
  background-color: #1f73fa;
}

button.btn-small {
  background-color: white;
  font-size: 12px;
  font-weight: bold;
  padding: 5px 10px;
  border: 2px solid;
}

button.btn-small.red {
  border: 1px solid lightgrey;
  color: #6e1010;
  border-color: #6e1010;
}

button.btn-small.green {
  border: 1px solid lightgrey;
  color: #11752f;
  border-color: #087a2a;
}

button.btn-small.red:hover, button.btn-small.green:hover {
  opacity: 90%;
}

.buttonBox {
  display: flex;
  justify-content: space-between;
}

/* Book list styling */
#book-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 20px;
  padding: 20px;
  border-radius: 8px;
  align-self: stretch;
  /* box-shadow: 0 2px 4px rgba(0,0,0,0.1); */
}

/* Card styling for each book */
.card {
  background: white;
  padding: 15px;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  transition: transform 0.3s ease;
  font-size: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.card > img {
  width: 150px;
  height: 200px;
  object-fit: cover;
  border-radius: 3px 20px 10px 3px;
  filter: drop-shadow(5px 5px 4px #bfbfc0);
}

.card-title {
  font-size: clamp(24px, 1rem, 30px);
  font-weight: bold;
}

.card-author {
  color: #424242;
  font-weight: bold;
  margin-bottom: 5px;
  border-bottom: 1px solid lightgrey;
}

.card-year {
  font-size: 0.9rem;
}

.card-rating {
  font-size: 2rem;
  margin-bottom: 5px;
}

.card-num-pages {
  font-size: 0.9rem;
  margin-bottom: 5px;
}

.card-is-read {
  font-style: italic;
  color: #5e5c5d;
  margin-bottom: 5px;
}

.card .remove-btn {
  float: right;
  font-weight: bold;
  color: grey;
  border: 1px solid grey;
}

.card .remove-btn:hover{
  background-color: rgb(245, 244, 244);
}

/* RATINGS */

.txt-center {
  text-align: center;
}
.hide {
  display: none;
}

.clear {
  float: none;
  clear: both;
}

.rating {
  width: 120px;
  unicode-bidi: bidi-override;
  direction: rtl;
  text-align: left;
  position: relative;
}

.rating > label {
  float: right;
  display: inline;
  font-size: 1.2rem;
  padding: 0;
  margin: 0;
  position: relative;
  width: 1.1em;
  cursor: pointer;
  color: #000;
}

.rating > label:hover,
.rating > label:hover ~ label,
.rating > input.radio-btn:checked ~ label {
  color: transparent;
}

.rating > label:hover:before,
.rating > label:hover ~ label:before,
.rating > input.radio-btn:checked ~ label:before,
.rating > input.radio-btn:checked ~ label:before {
  content: "\2605";
  position: absolute;
  left: 0;
  color: #f39406;
}

/* Star rating display */
.star-rating-filled, .star-rating-unfilled {
  /* display: inline-block; */
  position: relative;
  width: 1.1em;
}

.star-rating-filled::before, .star-rating-unfilled::before {
  content: "â˜…"; /* This sets the star character */
  /* position: absolute; */
}

.star-rating-filled::before {
  color: #f39406; /* Yellow color for filled stars */
}

.star-rating-unfilled::before {
  color: #a3a3a3; /* Transparent color for unfilled stars */
}

/* The Modal (background) */
.form-modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.form-modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: clamp(350px, 80%, 500px);
}

/* The Close Button */
.close-btn {
  color: #aaa;
  align-self: flex-end;
  font-size: 28px;
  font-weight: bold;
}

.close-btn:hover,
.close-btn:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
--------------------------
Path: tempCodeRunnerFile.js


}
